#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "benchmark"
require "nerd_dice"

n = 50_000

RATIOS = {
  total_dice_securerandom: 1.7,
  total_dice_random_rand: 11.1,
  total_dice_random_object: 13.0,
  total_dice_randomized: 5.5,
  total_dice_securerandom_3d6: 5.5,
  total_dice_random_rand_3d6: 30.0,
  total_dice_random_object_3d6: 25.5,
  total_dice_randomized_3d6: 15.5,
  roll_dice_securerandom: 4.0,
  roll_dice_random_rand: 42.0,
  roll_dice_random_object: 44.0,
  roll_dice_randomized: 11.5,
  roll_dice_securerandom_3d6: 13.0,
  roll_dice_random_rand_3d6: 79.0,
  roll_dice_random_object_3d6: 86.0,
  roll_dice_randomized_3d6: 26.5
}.freeze

def check_against_baseline!(baseline_value, test_value)
  ratio = RATIOS[test_value.label.to_sym]
  error_message = "Failed benchmark for #{test_value.label}. "
  error_message += "Allowed ratio was #{ratio} actual ratio was #{test_value.real / baseline_value}"
  raise NerdDice::Error, error_message if test_value.real > baseline_value * ratio
end

puts "Set baseline"
baselines = Benchmark.bmbm do |x|
  # Random.rand()
  x.report("Random.rand") do # standard rand()
    n.times { Random.rand(1000) }
  end

  # SecureRandom.rand()
  x.report("Sec.rand") do
    n.times { SecureRandom.rand(1000) }
  end
end

random_rand_baseline = baselines[0].real
securerandom_baseline = baselines[1].real

puts "Roll d1000s"
total_dice_d1000_results = Benchmark.bmbm do |x|
  # NerdDice.total_dice securerandom
  x.report("total_dice_securerandom") do
    NerdDice.configuration.randomization_technique = :securerandom
    n.times { NerdDice.total_dice(1000) }
  end

  x.report("total_dice_random_rand") do
    NerdDice.configuration.randomization_technique = :random_rand
    n.times { NerdDice.total_dice(1000) }
  end

  x.report("total_dice_random_object") do
    NerdDice.configuration.randomization_technique = :random_object
    n.times { NerdDice.total_dice(1000) }
  end

  x.report("total_dice_randomized") do
    NerdDice.configuration.randomization_technique = :randomized
    n.times { NerdDice.total_dice(1000) }
  end
end

total_dice_securerandom = total_dice_d1000_results[0]
check_against_baseline! securerandom_baseline, total_dice_securerandom
total_dice_random_rand = total_dice_d1000_results[1]
check_against_baseline! random_rand_baseline, total_dice_random_rand
total_dice_random_object = total_dice_d1000_results[2]
check_against_baseline! random_rand_baseline, total_dice_random_object
total_dice_randomized = total_dice_d1000_results[3]
check_against_baseline! ((random_rand_baseline * 0.75) + (securerandom_baseline * 0.25)), total_dice_randomized

roll_dice_d1000_results = Benchmark.bmbm do |x|
  # NerdDice.roll_dice securerandom
  x.report("roll_dice_securerandom") do
    NerdDice.configuration.randomization_technique = :securerandom
    n.times { NerdDice.roll_dice(1000) }
  end

  x.report("roll_dice_random_rand") do
    NerdDice.configuration.randomization_technique = :random_rand
    n.times { NerdDice.roll_dice(1000) }
  end

  x.report("roll_dice_random_object") do
    NerdDice.configuration.randomization_technique = :random_object
    n.times { NerdDice.roll_dice(1000) }
  end

  x.report("roll_dice_randomized") do
    NerdDice.configuration.randomization_technique = :randomized
    n.times { NerdDice.roll_dice(1000) }
  end
end

roll_dice_securerandom = roll_dice_d1000_results[0]
check_against_baseline! securerandom_baseline, roll_dice_securerandom
roll_dice_random_rand = roll_dice_d1000_results[1]
check_against_baseline! random_rand_baseline, roll_dice_random_rand
roll_dice_random_object = roll_dice_d1000_results[2]
check_against_baseline! random_rand_baseline, roll_dice_random_object
roll_dice_randomized = roll_dice_d1000_results[3]
check_against_baseline! ((random_rand_baseline * 0.75) + (securerandom_baseline * 0.25)), roll_dice_randomized

puts "Roll 3d6"
total_dice_3d6_results = Benchmark.bmbm do |x|
  # NerdDice.total_dice securerandom
  x.report("total_dice_securerandom_3d6") do
    NerdDice.configuration.randomization_technique = :securerandom
    n.times { NerdDice.total_dice(6, 3) }
  end

  x.report("total_dice_random_rand_3d6") do
    NerdDice.configuration.randomization_technique = :random_rand
    n.times { NerdDice.total_dice(6, 3) }
  end

  x.report("total_dice_random_object_3d6") do
    NerdDice.configuration.randomization_technique = :random_object
    n.times { NerdDice.total_dice(6, 3) }
  end

  x.report("total_dice_randomized_3d6") do
    NerdDice.configuration.randomization_technique = :randomized
    n.times { NerdDice.total_dice(6, 3) }
  end
end

total_dice_3d6_securerandom = total_dice_3d6_results[0]
check_against_baseline! securerandom_baseline, total_dice_3d6_securerandom
total_dice_3d6_random_rand = total_dice_3d6_results[1]
check_against_baseline! random_rand_baseline, total_dice_3d6_random_rand
total_dice_3d6_random_object = total_dice_3d6_results[2]
check_against_baseline! random_rand_baseline, total_dice_3d6_random_object
total_dice_3d6_randomized = total_dice_3d6_results[3]
check_against_baseline! ((random_rand_baseline * 0.75) + (securerandom_baseline * 0.25)), total_dice_3d6_randomized

roll_dice_3d6_results = Benchmark.bmbm do |x|
  # NerdDice.roll_dice securerandom
  x.report("roll_dice_securerandom_3d6") do
    NerdDice.configuration.randomization_technique = :securerandom
    n.times { NerdDice.roll_dice(6, 3) }
  end

  x.report("roll_dice_random_rand_3d6") do
    NerdDice.configuration.randomization_technique = :random_rand
    n.times { NerdDice.roll_dice(6, 3) }
  end

  x.report("roll_dice_random_object_3d6") do
    NerdDice.configuration.randomization_technique = :random_object
    n.times { NerdDice.roll_dice(6, 3) }
  end

  x.report("roll_dice_randomized_3d6") do
    NerdDice.configuration.randomization_technique = :randomized
    n.times { NerdDice.roll_dice(6, 3) }
  end
end

roll_dice_3d6_securerandom = roll_dice_3d6_results[0]
check_against_baseline! securerandom_baseline, roll_dice_3d6_securerandom
roll_dice_3d6_random_rand = roll_dice_3d6_results[1]
check_against_baseline! random_rand_baseline, roll_dice_3d6_random_rand
roll_dice_3d6_random_object = roll_dice_3d6_results[2]
check_against_baseline! random_rand_baseline, roll_dice_3d6_random_object
roll_dice_3d6_randomized = roll_dice_3d6_results[3]
check_against_baseline! ((random_rand_baseline * 0.75) + (securerandom_baseline * 0.25)), roll_dice_3d6_randomized
